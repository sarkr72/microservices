server:
  port: 8081

spring:
  application:
    name: employee-service

  datasource:
    url: jdbc:h2:mem:employeedb;DB_CLOSE_DELAY=-1;MODE=PostgreSQL
    driver-class-name: org.h2.Driver
    username: sa
    password:

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true

  sql:
    init:
      mode: never

  h2:
    console:
      enabled: true
      path: /h2-console

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: employee-group       # <-- important!
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.common.events
        spring.json.value.default.type: com.common.events.DepartmentCreatedEvent
      auto-offset-reset: latest       # <-- avoid reprocessing old messages

  cloud:
    stream:
      bindings:
        departmentCreated-in-0:
          destination: department-created
          group: employee-group          # <-- set consumer group
          contentType: application/json
      kafka:
        binder:
          auto-create-topics: true

springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html

feign:
  client:
    config:
      default:
        connectTimeout: 5000
        readTimeout: 10000
      department-service:
        connectTimeout: 5000
        readTimeout: 10000

resilience4j:
  circuitbreaker:
    instances:
      deptServiceCircuit:
        registerHealthIndicator: true
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 60000
        permittedNumberOfCallsInHalfOpenState: 5

management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus
  endpoint:
    health:
      show-details: always

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    register-with-eureka: true
    fetch-registry: true
  instance:
    prefer-ip-address: true
    hostname: localhost
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10
    instance-id: ${spring.application.name}:${server.port}

logging:
  level:
    org.springframework: INFO        # <-- reduce verbose logging
    org.hibernate: INFO
    com.employee.service: DEBUG
    org.springframework.cloud.stream: INFO
    org.springframework.kafka: INFO
    org.apache.kafka: INFO
